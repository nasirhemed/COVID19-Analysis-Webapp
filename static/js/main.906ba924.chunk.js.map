{"version":3,"sources":["components/__ui__/Navbar/index.tsx","components/__ui__/Tabs/index.tsx","components/__ui__/BarGraph/index.tsx","components/__ui__/Sidebar/index.tsx","store/types/data.ts","app/utils/index.ts","store/actions/actions.ts","components/GraphSection/index.tsx","App.tsx","store/actions/urls.ts","serviceWorker.ts","store/reducer/reducer.ts","store/store.ts","index.tsx"],"names":["Navbar","props","AppBar","color","position","Toolbar","Typography","variant","Tabs","handleClick","tabs","value","indicatorColor","textColor","onChange","_","newValue","map","tabName","index","key","label","Container","styled","div","Graph","data","title","config","scrollZoom","displayModeBar","displaylogo","layout","yaxis","fixedrange","xaxis","DropdownContainer","CheckboxContainer","Title","useStyles","makeStyles","root","display","formControl","width","fontSize","Sidebar","types","selectedType","provinces","countries","handleChangeType","handleFilter","selectedFilters","sortedFilters","sort","classes","handleCheckbox","event","checked","target","name","filters","push","indexOf","splice","Select","type","MenuItem","area","FormControlLabel","className","control","Checkbox","includes","sortHandler","a","b","order","filterCountries","payload","GraphContainer","ChartContainer","connect","state","allCountryNames","dataSet","allProvinceNames","filteredCountries","filteredProvinces","series","filteredSeries","dispatch","sortedData","sortCountries","level","xKey","isEmpty","length","x","y","confirmed","seriesData","country","dates","date","moment","toDate","mode","provinceNames","find","province","provinceCheckbox","filterList","filterProvinces","React","useState","setIndex","useEffect","d3","d","Country_Region","Number","Confirmed","recovered","Recovered","deaths","Deaths","then","columns","allCountries","entry","receiveCountry","Province_State","allStates","entries","values","nestedEntry","states","receiveProvince","Last_Update","deltaConfirmed","Delta_Confirmed","deltaRecovered","Delta_Recovered","countriesOnly","filter","formattedData","rollup","v","reduce","result","el","Boolean","window","location","hostname","match","rootReducer","combineReducers","allCountryCases","allProvinceCases","allSeries","ui","fetching","success","action","loggerMiddleware","createLogger","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.906ba924.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nconst Navbar: React.FC = props => {\n\n    return <AppBar color='default' position=\"static\">\n    <Toolbar>\n      <Typography variant=\"h6\">\n        COVID-19 Analysis\n      </Typography>\n    </Toolbar>\n  </AppBar>\n}\n\nexport default Navbar","import React from \"react\";\nimport { Tabs as MuiTabs, Tab as MuiTab } from \"@material-ui/core\";\n\ninterface Props {\n  handleClick: (value: number) => void;\n  tabs: string[];\n  value: number;\n}\n\nconst Tabs: React.FC<Props> = props => {\n  const { handleClick, tabs, value } = props;\n\n  const handleChange = (_: React.ChangeEvent<{}>, newValue: number) => {\n    handleClick(newValue);\n  };\n\n  return (\n    <MuiTabs\n      value={value}\n      indicatorColor=\"primary\"\n      textColor=\"primary\"\n      onChange={handleChange}\n    >\n      {tabs.map((tabName, index) => \n        <MuiTab key={index} label={tabName} />\n      )}\n    </MuiTabs>\n  );\n};\n\nexport default Tabs","import React from \"react\";\nimport Plot from \"react-plotly.js\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div``;\n\ninterface Props {\n  data: {\n    x: string[];\n    y: number[];\n    name: string;\n    type: \"bar\" | \"scatter\";\n  }[];\n\n  title: string;\n}\n\nconst Graph: React.FC<Props> = props => {\n  const { data, title } = props;\n  return (\n    <Container>\n      <Plot\n        data={data}\n        config={{\n          scrollZoom: false,\n          displayModeBar: false,\n          displaylogo: false\n        }}\n        layout={{\n          title: title,\n          yaxis: { fixedrange: true },\n          xaxis: { fixedrange: true }\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default Graph;\n","import styled from 'styled-components'\nimport React from 'react'\nimport { FormControlLabel, Checkbox, Select, MenuItem } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/styles'\n\nconst Container = styled.div`\n    background: antiquewhite;\n    height: 100%;\n    width: 250px;\n    position: relative;\n`\n\nconst DropdownContainer = styled.div`\n    margin-top: 10px;\n    font-size: 12px;\n`\n\nconst CheckboxContainer = styled.div`\n    height: 800px;\n    overflow-y: scroll;\n    display: block;\n\n    .MuiTypography-body1 {\n        font-size: 12px !important;\n    }\n`\n\nconst Title = styled.div`\n    font-size: 30px;\n    margin : 10px;\n`\n\nconst useStyles = makeStyles(() => ({\n    root: {\n      display: 'flex',\n    },\n    formControl: {\n      width: '80%',\n      'span' : {\n        fontSize: '12px'\n      }\n    }\n  }));\n\n\ninterface Props {\n    selectedType: string\n    types: string[]\n    provinces: string[]\n    selectedFilters: string[]\n    countries: string[]\n    handleChangeType: (type: string) => void\n    handleFilter: (filters: string[]) => void\n}\n\nconst Sidebar: React.FC<Props> = props => {\n\n    const { types, selectedType, provinces, countries, handleChangeType, handleFilter, selectedFilters } = props\n\n    const filters = selectedType === 'World' ? countries : provinces\n    const sortedFilters = filters.sort()\n\n    const classes = useStyles()\n\n    const handleCheckbox = (event: React.ChangeEvent) => {\n\n        const checked = (event.target as any).checked\n        const name = (event.target as any).name\n        const filters = [...selectedFilters]\n        if (checked) {\n            filters.push(name)\n        }\n        else {\n            const index = filters.indexOf(name)\n            if (index > -1) {\n                filters.splice(index, 1)\n            }\n        }\n        handleFilter(filters)\n    }\n\n    return <Container>\n        <Title>Selectors</Title>\n\n        <DropdownContainer>\n            <Select onChange={(event) => handleChangeType((event.target as any).value)} value={selectedType}>\n                {types.map((type, index) => <MenuItem key={index} value={type} >{type}</MenuItem>)}\n            </Select>\n        </DropdownContainer>\n\n        <CheckboxContainer>\n            {sortedFilters.map(area =>\n                <FormControlLabel\n                    className={classes.formControl}\n                    control={\n                        <Checkbox\n                            checked={selectedFilters.includes(area)}\n                            onChange={handleCheckbox}\n                            name={area}\n                        />}\n                    label={area}\n                />\n            )}\n        </CheckboxContainer>\n    </Container>\n}\n\nexport default Sidebar","export interface CountryStatus {\n    country: string\n    confirmed: number\n    deaths: number\n    recovered: number\n}\n\nexport interface ProvinceStatus {\n    province: string\n    confirmed: number\n    deaths: number\n    recovered: number\n}\n\nexport interface CountrySeries {\n    country: string,\n    dates: string[]\n    confirmed : number[]\n    recovered: number[]\n    deltaConfirmed: number[]\n    deltaRecovered: number[] \n    deaths: number[]\n}\n\nexport interface Provinces {\n    country: string,\n    provinces: string[]\n}\n\nexport const types = [\n    'World',\n    'US',\n    'Canada',\n    'United Kingdom',\n    'China',\n    'Netherlands',\n    'Australia',\n    'Denmark',\n    'France'\n]","import { CountrySeries, CountryStatus, ProvinceStatus } from \"../../store/types/data\"\n\n\nexport const getGroupedData = (data: CountrySeries[], days = 7) => {\n\n    const total: CountrySeries[] = []\n    \n    let deltaConfirmed: number = 0\n    let deltaRecovered: number = 0\n\n\n    for (let country of data) {\n        \n        const countrySeries: CountrySeries = {\n            country: country.country,\n            confirmed: [],\n            recovered: [],\n            deaths: [],\n            deltaConfirmed: [],\n            deltaRecovered: [],\n            dates: []\n        }\n\n        let weekNum = 1\n        for (let j = 0; j < country.dates.length; j++) {\n\n            // confirmed += country.confirmed[j]\n            // recovered += country.recovered[j]\n            // deaths += country.deaths[j]\n            deltaConfirmed += country.deltaConfirmed[j]\n            deltaRecovered += country.deltaRecovered[j]\n            \n            if ((j + 1) % days === 0) {\n                countrySeries.confirmed.push(country.confirmed[j])\n                countrySeries.recovered.push(country.recovered[j])\n                countrySeries.deaths.push(country.deaths[j])\n                countrySeries.deltaConfirmed.push(deltaConfirmed)\n                countrySeries.deltaRecovered.push(deltaRecovered)\n                countrySeries.dates.push(`Week ${weekNum++}`)\n                deltaConfirmed = 0\n                deltaRecovered = 0\n            }\n\n        }\n        total.push(countrySeries)\n    }\n    return total\n}\n\n\nexport const sortCountries = (countries : CountryStatus[] | ProvinceStatus[]) => {\n    return [...countries].sort((a, b) => sortHandler(a, b, 'confirmed'))\n}\n\nconst sortHandler = (a: any, b: any , key: string , order: 'asc' | 'desc' = 'desc') : number => {\n    return order === 'asc' ? a[key] - b[key] : b[key] - a[key]\n}","import * as d3 from \"d3\";\nimport { CountryStatus, ProvinceStatus, CountrySeries } from \"../types/data\";\nimport { COUNTRY_CASES_URL, PROVINCE_CASES_URL, TIME_SERIES_URL } from \"./urls\";\n\nexport const REQUEST_COUNTRY = \"REQUEST_COUNTRY\";\nexport const REQUEST_PROVINCE = \"REQUEST_PROVINCE\";\nexport const REQUEST_SERIES = \"REQUEST_SERIES\";\nexport const RECEIVE_COUNTRY = \"RECEIVE_COUNTRY\";\nexport const RECEIVE_SERIES = \"RECEIVE_SERIES\";\nexport const RECEIVE_PROVINCE = \"RECEIVE_PROVINCE\";\nexport const RECEIVE_PROVINCE_NAMES = \"RECEIVE_PROVINCE_NAMES\";\nexport const RECEIVE_COUNTRY_NAMES = \"RECEIVE_COUNTRY_NAMES\";\nexport const FILTER_COUNTRIES = \"FILTER_COUNTRIES\";\nexport const FILTER_PROVINCE = \"FILTER_PROVINCES\";\nexport const CHANGE_LEVEL = \"CHANGE_LEVEL\";\n\ntype filterCountriesAction = {\n  type: typeof FILTER_COUNTRIES;\n  payload: string[];\n};\n\ntype filterProvinceAction = {\n  type: typeof FILTER_PROVINCE;\n  payload: string[];\n};\n\ntype changeLevelAction = {\n  type: typeof CHANGE_LEVEL;\n  payload: string;\n};\n\ntype ReceiveProvinceNamesAction = {\n  type: typeof RECEIVE_PROVINCE_NAMES;\n  payload: {\n    country: string;\n    provinces: string[];\n  }[];\n};\n\ntype ReceiveCountryNamesAction = {\n  type: typeof RECEIVE_COUNTRY_NAMES;\n  payload: string[];\n};\n\ntype RequestCountryAction = {\n  type: typeof REQUEST_COUNTRY;\n};\n\ntype ReceiveCountryAction = {\n  type: typeof RECEIVE_COUNTRY;\n  payload: CountryStatus[];\n};\n\ntype RequestProvinceAction = {\n  type: typeof REQUEST_PROVINCE;\n};\n\ntype ReceiveProvinceAction = {\n  type: typeof RECEIVE_PROVINCE;\n  payload: ProvinceStatus[];\n};\n\ntype RequestSeriesAction = {\n  type: typeof REQUEST_SERIES;\n};\n\ntype ReceiveSeriesAction = {\n  type: typeof RECEIVE_SERIES;\n  payload: CountrySeries[];\n};\n\nexport function filterCountries(countries: string[]): filterCountriesAction {\n  return {\n    type: FILTER_COUNTRIES,\n    payload: countries\n  };\n}\n\nexport function filterProvinces(provinces: string[]): filterProvinceAction {\n  return {\n    type: FILTER_PROVINCE,\n    payload: provinces\n  };\n}\n\nexport function changeLevel(level: string): changeLevelAction {\n  return {\n    type: CHANGE_LEVEL,\n    payload: level\n  };\n}\n\nfunction requestCountry(): RequestCountryAction {\n  return {\n    type: REQUEST_COUNTRY\n  };\n}\n\nfunction receiveCountry(data: CountryStatus[]): ReceiveCountryAction {\n  return {\n    type: RECEIVE_COUNTRY,\n    payload: data\n  };\n}\n\nfunction receiveCountryNames(countries: string[]): ReceiveCountryNamesAction {\n  return {\n    type: RECEIVE_COUNTRY_NAMES,\n    payload: countries\n  };\n}\n\nexport function requestProvince(): RequestProvinceAction {\n  return {\n    type: REQUEST_PROVINCE\n  };\n}\n\nexport function receiveProvince(data: ProvinceStatus[]): ReceiveProvinceAction {\n  return {\n    type: RECEIVE_PROVINCE,\n    payload: data\n  };\n}\n\nexport function requestSeries(): RequestSeriesAction {\n  return {\n    type: REQUEST_SERIES\n  };\n}\n\nexport function receiveSeries(\n  countrySeries: CountrySeries[]\n): ReceiveSeriesAction {\n  return {\n    type: RECEIVE_SERIES,\n    payload: countrySeries\n  };\n}\n\nexport function receiveProvinceNames(\n  provinces: { country: string; provinces: string[] }[]\n): ReceiveProvinceNamesAction {\n  return {\n    type: RECEIVE_PROVINCE_NAMES,\n    payload: provinces\n  };\n}\n\nexport function fetchCountryData() {\n  return (dispatch: any) => {\n    dispatch(requestCountry());\n    const data = d3.csv(COUNTRY_CASES_URL, d => {\n      const countryStatus: CountryStatus = {\n        country: d.Country_Region as string,\n        confirmed: Number(d.Confirmed),\n        recovered: Number(d.Recovered),\n        deaths: Number(d.Deaths)\n      };\n      return countryStatus;\n    });\n    return data.then(d => {\n      d.columns = [\"country\", \"confirmed\", \"recovered\", \"deaths\"];\n      const allCountries = d.map(entry => entry.country);\n      dispatch(receiveCountry(d));\n      dispatch(receiveCountryNames(allCountries));\n    });\n  };\n}\n\nexport function fetchProvinceData() {\n  return (dispatch: any) => {\n    dispatch(requestProvince());\n    const data = d3.csv(PROVINCE_CASES_URL, d => {\n      return {\n        province: d.Province_State as string,\n        country: d.Country_Region as string,\n        confirmed: Number(d.Confirmed),\n        recovered: Number(d.Recovered),\n        deaths: Number(d.Deaths)\n      };\n    });\n    return data.then(d => {\n      const allStates = d3\n        .nest<typeof d[0], string>()\n        .key(entry => entry.country)\n        .entries(d)\n        .map(entry => ({\n          country: entry.key,\n          provinces: entry.values.map(\n            (nestedEntry: typeof d[0]) => nestedEntry.province\n          ) as string[]\n        }));\n\n      const states: ProvinceStatus[] = d.map(entry => ({\n        province: entry.province,\n        confirmed: entry.confirmed,\n        deaths: entry.deaths,\n        recovered: entry.recovered\n      }));\n      dispatch(receiveProvince(states));\n      dispatch(receiveProvinceNames(allStates));\n    });\n  };\n}\n\nexport function fetchSeriesData() {\n  return (dispatch: any) => {\n    dispatch(requestSeries());\n    const data = d3.csv(TIME_SERIES_URL, d => ({\n      country: d.Country_Region as string,\n      date: d.Last_Update as string,\n      province: d.Province_State,\n      confirmed: Number(d.Confirmed),\n      recovered: Number(d.Recovered),\n      deaths: Number(d.Deaths),\n      deltaConfirmed: Number(d.Delta_Confirmed),\n      deltaRecovered: Number(d.Delta_Recovered)\n    }));\n\n    return data.then(series => {\n      const countriesOnly = series.filter(value => !value.province)\n      const formattedData = d3\n        .nest<typeof series[0], CountrySeries>()\n        .key(d => d.country)\n        .rollup(v => ({\n          country: v[0].country,\n          dates: v.map(d => d.date),\n          confirmed: v.map(d => d.confirmed),\n          recovered: v.map(d => d.recovered),\n          deaths: v.map(d => d.deaths),\n          deltaConfirmed: v.map(d => d.deltaConfirmed),\n          deltaRecovered: v.map(d => d.deltaRecovered)\n        }))\n        .entries(countriesOnly)\n        .reduce<CountrySeries[]>((result, el) => {\n          el.value && result.push(el.value);\n          return result;\n        }, []);\n\n      dispatch(receiveSeries(formattedData));\n      dispatch(\n        filterCountries([\n          \"US\",\n          \"Canada\",\n          \"Italy\",\n          \"Spain\",\n          \"United Kingdom\"\n        ])\n      );\n    });\n  };\n}\n\nexport type actionType =\n  | RequestCountryAction\n  | ReceiveCountryAction\n  | RequestProvinceAction\n  | RequestSeriesAction\n  | ReceiveProvinceAction\n  | ReceiveCountryNamesAction\n  | ReceiveProvinceNamesAction\n  | ReceiveSeriesAction\n  | filterCountriesAction\n  | filterProvinceAction\n  | changeLevelAction;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport moment from \"moment\";\nimport Chart from \"../__ui__/BarGraph\";\nimport Sidebar from \"../__ui__/Sidebar\";\nimport { State } from \"../../store/reducer/reducer\";\n\n\nimport {\n  ProvinceStatus,\n  CountrySeries,\n  CountryStatus,\n  types\n} from \"../../store/types/data\";\nimport Plot from \"react-plotly.js\";\nimport { sortCountries } from \"../../app/utils\";\nimport { changeLevel, filterCountries, filterProvinces } from \"../../store/actions/actions\";\nconst GraphContainer = styled.div`\n  display: flex;\n  width: 100%;\n  margin-top: 12px;\n`;\n\nconst ChartContainer = styled.div``;\n\ninterface Props {\n  allCountryNames: string[];\n  allProvinceNames: {\n    country: string;\n    provinces: string[];\n  }[];\n  countries: CountryStatus[];\n  provinces: ProvinceStatus[];\n  series: CountrySeries[];\n  filters: {\n    level: string;\n    country: string[];\n    province: string[];\n  };\n  dispatch: React.Dispatch<any>;\n}\n\nconst GraphSection: React.FC<Props> = props => {\n  const {\n    countries,\n    provinces,\n    allCountryNames,\n    dispatch,\n    allProvinceNames,\n    series,\n    filters\n  } = props;\n\n  const toDisplay = filters.level === 'World' ? countries : provinces\n\n  const sortedData: any = sortCountries(toDisplay);\n\n  const xKey = filters.level === 'World' ?'country' : 'province'\n  const isEmpty = filters.level === 'World' ? countries.length === 0 : provinces.length === 0\n  const data = [\n    {\n      x: sortedData.map((data: any) => data[xKey]),\n      y: sortedData.map((data: any) => data.confirmed),\n      type: \"bar\" as const,\n      name: \"Confirmed Cases per Country\"\n    }\n  ];\n\n  const seriesData = series.map(country => ({\n    type: \"scatter\" as const,\n    x: country.dates.map(date => moment(date).toDate()),\n    y: country.confirmed,\n    name: country.country,\n    mode: \"lines\" as const\n  }));\n\n  const handleChangeType = (value: string) => {\n    dispatch(changeLevel(value));\n  };\n\n  const handleFilterChange = (filterList: string[]) => {\n\n    if (filters.level === 'World') {\n        dispatch(filterCountries(filterList));\n    } else {\n        dispatch(filterProvinces(filterList))\n    }\n  };\n\n  const provinceNames = allProvinceNames.find(\n    province => province.country === filters.level\n  );\n  const provinceCheckbox = !!provinceNames ? provinceNames.provinces : [];\n  const selectedFilters =\n    filters.level === \"World\" ? filters.country : filters.province;\n\n  return (\n    <GraphContainer>\n      <Sidebar\n        handleFilter={handleFilterChange}\n        types={types}\n        selectedType={filters.level}\n        selectedFilters={selectedFilters}\n        countries={allCountryNames}\n        provinces={provinceCheckbox}\n        handleChangeType={handleChangeType}\n      />\n\n      <ChartContainer>\n        {!isEmpty && <Chart data={data} title={\"Number of Cases against Country\"} />}\n        <Plot data={seriesData} layout={{ title: \"Trend line of the cases\" }} config={{displayModeBar: false}} />\n      </ChartContainer>\n    </GraphContainer>\n  );\n};\n\nconst mapStateToProps = (state: { dataSet: State }) => {\n  return {\n    allCountryNames: state.dataSet.countries,\n    allProvinceNames: state.dataSet.provinces,\n    countries: state.dataSet.filteredCountries,\n    provinces: state.dataSet.filteredProvinces,\n    series: state.dataSet.filteredSeries,\n    filters: state.dataSet.filters\n  };\n};\nexport default connect(mapStateToProps)(GraphSection);\n","import React from 'react';\r\n// import { Counter } from './features/counter/Counter';\r\nimport './App.css';\r\nimport { connect } from 'react-redux'\r\nimport Navbar from './components/__ui__/Navbar'\r\nimport Tabs from './components/__ui__/Tabs'\r\nimport GraphSection from './components/GraphSection';\r\nimport { fetchCountryData, fetchProvinceData, fetchSeriesData } from './store/actions/actions';\r\n\r\nfunction App(props: any) {\r\n\r\n  const {dispatch} = props\r\n  const values = ['Graph', 'Map']\r\n  const [index, setIndex] = React.useState(0)\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchCountryData())\r\n    dispatch(fetchProvinceData())\r\n    dispatch(fetchSeriesData())\r\n}, [dispatch])\r\n\r\n  return (\r\n\r\n      <div className=\"App\">\r\n        <Navbar/>\r\n        <Tabs tabs={values} value={index} handleClick={(value) => setIndex(value)}/>\r\n        \r\n        <header>\r\n          {index === 0 ? \r\n            <GraphSection/>\r\n            : <p>This is the Map Section</p>}\r\n          \r\n        </header>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default connect()(App);\r\n","export const COUNTRY_CASES_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv'\nexport const PROVINCE_CASES_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_state.csv'\nexport const TIME_SERIES_URL = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_time.csv'","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\n\nimport {\n  RECEIVE_COUNTRY,\n  RECEIVE_PROVINCE,\n  REQUEST_COUNTRY,\n  REQUEST_PROVINCE,\n  REQUEST_SERIES,\n  RECEIVE_SERIES,\n  actionType,\n  RECEIVE_COUNTRY_NAMES,\n  RECEIVE_PROVINCE_NAMES,\n  FILTER_COUNTRIES,\n  FILTER_PROVINCE,\n  CHANGE_LEVEL\n} from \"../actions/actions\";\nimport { CountryStatus, ProvinceStatus, CountrySeries } from \"../types/data\";\n\nexport interface State {\n  ui: {\n    country: {\n      fetching: boolean;\n      success: boolean;\n    };\n    province: {\n      fetching: boolean;\n      success: boolean;\n    };\n    series: {\n      fetching: boolean;\n      success: boolean;\n    };\n  };\n  allCountryCases: CountryStatus[];\n  allProvinceCases: ProvinceStatus[];\n  allSeries: CountrySeries[];\n  countries: string[]\n  provinces: {\n      country: string\n      provinces: string[]\n  }[]\n  filteredCountries: CountryStatus[];\n  filteredProvinces: ProvinceStatus[];\n  filteredSeries: CountrySeries[];\n  filters: {\n    level: string\n    country: string[];\n    province: string[];\n  };\n  \n}\n\nfunction dataSet(\n  state: State = {\n    allCountryCases: [],\n    allProvinceCases: [],\n    allSeries: [],\n    countries: [],\n    provinces: [],\n    filteredCountries: [],\n    filteredProvinces: [],\n    filteredSeries: [],\n    ui: {\n      country: {\n        fetching: false,\n        success: false\n      },\n      province: {\n        fetching: false,\n        success: false\n      },\n      series: {\n        fetching: false,\n        success: false\n      }\n    },\n    filters: {\n      level: 'World',\n      country: [],\n      province: []\n    }\n  },\n  action: actionType\n): State {\n  switch (action.type) {\n    case REQUEST_COUNTRY:\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          country: {\n            ...state.ui.country,\n            fetching: true\n          }\n        }\n      };\n    case RECEIVE_COUNTRY:\n      return {\n        ...state,\n        allCountryCases: action.payload,\n        ui: {\n          ...state.ui,\n          country: {\n            ...state.ui.country,\n            fetching: false,\n            success: true\n          }\n        }\n      };\n    case RECEIVE_COUNTRY_NAMES:\n        return {\n            ...state,\n            countries: action.payload\n        }\n    case REQUEST_PROVINCE:\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          province: {\n            ...state.ui.province,\n            fetching: true\n          }\n        }\n      };\n    case RECEIVE_PROVINCE:\n      return {\n        ...state,\n        allProvinceCases: action.payload,\n        ui: {\n          ...state.ui,\n          province: {\n            fetching: true,\n            success: true\n          }\n        }\n      };\n    case RECEIVE_PROVINCE_NAMES:\n        return {\n            ...state,\n            provinces: action.payload\n        }\n\n    case FILTER_COUNTRIES:\n      return {\n        ...state,\n        filteredCountries: state.allCountryCases.filter(country => action.payload.includes(country.country)),\n        filteredSeries: state.allSeries.filter(country => action.payload.includes(country.country)),\n        filters: {\n          ...state.filters,\n          country: action.payload\n        }\n      }\n    case FILTER_PROVINCE:\n      return {\n        ...state,\n        filteredProvinces: state.allProvinceCases.filter(province => action.payload.includes(province.province)),\n        filters: {\n          ...state.filters,\n          province: action.payload\n        }\n      }\n    case REQUEST_SERIES:\n      return {\n        ...state,\n        ui: {\n          ...state.ui,\n          series: {\n            ...state.ui.series,\n            fetching: true\n          }\n        }\n      }\n    case RECEIVE_SERIES:\n      return {\n        ...state,\n        allSeries: action.payload\n      }\n    case CHANGE_LEVEL:\n      return {\n        ...state,\n        filters: {\n          ...state.filters,\n          province: [],\n          level: action.payload\n        }\n      }\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  dataSet\n});\n\nexport default rootReducer;\n","import thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducer/reducer'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState: any) {\n    return createStore(\n      rootReducer,\n      composeWithDevTools(applyMiddleware(thunkMiddleware, loggerMiddleware))\n    )\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport configureStore from './store/store';\r\n\r\nconst store = configureStore({})\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}